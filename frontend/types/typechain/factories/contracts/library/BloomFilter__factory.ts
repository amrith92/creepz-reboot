/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BloomFilter,
  BloomFilterInterface,
} from "../../../contracts/library/BloomFilter";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_bitmap",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "_hashCount",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "_item",
        type: "bytes32",
      },
    ],
    name: "addToBitmap",
    outputs: [
      {
        internalType: "uint256",
        name: "_newBitmap",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_bitmap",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "_hashCount",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "_item",
        type: "bytes32",
      },
    ],
    name: "falsePositive",
    outputs: [
      {
        internalType: "bool",
        name: "_probablyPresent",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_itemNum",
        type: "uint256",
      },
    ],
    name: "getHashCount",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x61083e610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806312540bc71461005057806316ccd1ec14610080578063250e7a4a146100b0575b600080fd5b61006a600480360381019061006591906103ee565b6100e0565b604051610077919061045c565b60405180910390f35b61009a600480360381019061009591906103ee565b6101f6565b6040516100a79190610486565b60405180910390f35b6100ca60048036038101906100c591906104a1565b6102fb565b6040516100d791906104dd565b60405180910390f35b6000808360ff1611610127576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90610555565b60405180910390fd5b60005b8360ff168110156101e9576000610100848360405160200161014d9291906105b7565b6040516020818303038152906040528051906020012060001c6101709190610612565b905061010081106101b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad9061068f565b60405180910390fd5b6000816001901b905080871787146101d457600093505050506101ef565b505080806101e1906106de565b91505061012a565b50600190505b9392505050565b600083905060008360ff1611610241576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023890610555565b60405180910390fd5b60005b8360ff168110156102f357600061010084836040516020016102679291906105b7565b6040516020818303038152906040528051906020012060001c61028a9190610612565b905061010081106102d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c79061068f565b60405180910390fd5b6000816001901b90508084179350505080806102eb906106de565b915050610244565b509392505050565b600080600160648461030d9190610727565b61900061031a9190610781565b61032491906107b2565b9050610100811015610339578091505061033f565b60ff9150505b919050565b600080fd5b6000819050919050565b61035c81610349565b811461036757600080fd5b50565b60008135905061037981610353565b92915050565b600060ff82169050919050565b6103958161037f565b81146103a057600080fd5b50565b6000813590506103b28161038c565b92915050565b6000819050919050565b6103cb816103b8565b81146103d657600080fd5b50565b6000813590506103e8816103c2565b92915050565b60008060006060848603121561040757610406610344565b5b60006104158682870161036a565b9350506020610426868287016103a3565b9250506040610437868287016103d9565b9150509250925092565b60008115159050919050565b61045681610441565b82525050565b6000602082019050610471600083018461044d565b92915050565b61048081610349565b82525050565b600060208201905061049b6000830184610477565b92915050565b6000602082840312156104b7576104b6610344565b5b60006104c58482850161036a565b91505092915050565b6104d78161037f565b82525050565b60006020820190506104f260008301846104ce565b92915050565b600082825260208201905092915050565b7f4861736820636f756e742063616e206e6f74206265207a65726f000000000000600082015250565b600061053f601a836104f8565b915061054a82610509565b602082019050919050565b6000602082019050818103600083015261056e81610532565b9050919050565b6000819050919050565b61059061058b826103b8565b610575565b82525050565b6000819050919050565b6105b16105ac82610349565b610596565b82525050565b60006105c3828561057f565b6020820191506105d382846105a0565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061061d82610349565b915061062883610349565b925082610638576106376105e3565b5b828206905092915050565b7f4f766572666c6f77206572726f72000000000000000000000000000000000000600082015250565b6000610679600e836104f8565b915061068482610643565b602082019050919050565b600060208201905081810360008301526106a88161066c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006106e982610349565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561071c5761071b6106af565b5b600182019050919050565b600061073282610349565b915061073d83610349565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610776576107756106af565b5b828202905092915050565b600061078c82610349565b915061079783610349565b9250826107a7576107a66105e3565b5b828204905092915050565b60006107bd82610349565b91506107c883610349565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156107fd576107fc6106af565b5b82820190509291505056fea26469706673582212201a67d86e64321d79f7649ef57dbe5c36c072aaafa397c821f7b16a9cea7f4d7564736f6c63430008090033";

type BloomFilterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BloomFilterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BloomFilter__factory extends ContractFactory {
  constructor(...args: BloomFilterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BloomFilter> {
    return super.deploy(overrides || {}) as Promise<BloomFilter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BloomFilter {
    return super.attach(address) as BloomFilter;
  }
  override connect(signer: Signer): BloomFilter__factory {
    return super.connect(signer) as BloomFilter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BloomFilterInterface {
    return new utils.Interface(_abi) as BloomFilterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BloomFilter {
    return new Contract(address, _abi, signerOrProvider) as BloomFilter;
  }
}
